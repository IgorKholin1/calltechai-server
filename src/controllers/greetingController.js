// src/controllers/greetingController.js
const { twiml: { VoiceResponse } } = require('twilio');
const logger                      = require('../logger');
// –Ω–∞—à–∞ –≥–∏–±—Ä–∏–¥–Ω–∞—è STT-—Ñ—É–Ω–∫—Ü–∏—è
const { transcribeAudio }           = require('../stt/hybridStt');
// —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ –∏ –∫–æ–¥–∞ —è–∑—ã–∫–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π –º–µ—Ç–∫–µ ('en' –∏–ª–∏ 'ru')
const getLanguageParams          = require('../utils/languageParams');
// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
const userMemory = {};
const wrapInSsml = require('../utils/wrapInSsml');

/**
 * –®–∞–≥ 1: –≤—ã–¥–∞—ë–º initial greeting ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
 */
async function handleInitialGreeting(req, res) {
  const callSid = req.body.CallSid || 'UNKNOWN';
  logger.info(`[CALL ${callSid}] Initial greeting requested`);
  if (userMemory[callSid]?.language) {
  const { voiceName, languageCode } = getLanguageParams(userMemory[callSid].language);
  const tw = new VoiceResponse();
  const phrase = languageCode === 'ru-RU'
    ? '–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∞—Å —Å–ª—ã—à–∞—Ç—å! –ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å?'
    : 'Welcome back! How can I help you?';

  tw.say({ voice: voiceName, language: languageCode }, phrase);
  tw.record({
    playBeep: true,
    maxLength: 10,
    timeout: 3,
    action: `/api/voice/continue?lang=${languageCode}`,
    method: 'POST',
  });

  return res.type('text/xml').send(tw.toString());
}

  const tw = new VoiceResponse();

  tw.say({
    voice: 'Polly.Joanna',
    language: 'en-US'
  }, '<speak><break time="500ms"/>Please say "Hello" to continue in English.</speak>');
  
  tw.say({
    voice: 'Polly.Tatyana',
    language: 'ru-RU'
  }, '<speak><break time="500ms"/>–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ ¬´–ü—Ä–∏–≤–µ—Ç¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º.</speak>');
  
  tw.record({
    playBeep: true,
    maxLength: 10,
    timeout: 6,
    action: '/api/voice/handle-greeting',
    method: 'POST'
  });
  
  res.type('text/xml');
  res.send(tw.toString());

}

/**
 * –®–∞–≥ 2: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ¬´Hello¬ª/¬´–ü—Ä–∏–≤–µ—Ç¬ª, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
 */
async function handleGreeting(req, res) {
  const callSid      = req.body.CallSid || 'UNKNOWN';
  const recordingUrl = req.body.RecordingUrl;
  logger.info(`[CALL ${callSid}] Received greeting audio`);

  if (!recordingUrl) {
    logger.error(`[CALL ${callSid}] No recording URL provided`);
    return res.sendStatus(400);
  }

  // 1) –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
  let transcript;
  try {
  // <<< –í–°–¢–ê–í–ö–ê: –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–¥ —è–∑—ã–∫–∞
  transcript = await hybridStt(recordingUrl, languageCode);
    if (!transcript || transcript.trim() === '') {
  logger.warn(`[CALL ${callSid}] STT –ø—É—Å—Ç–æ–π ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å`);
  // –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ fallback
}
    logger.info(`[CALL ${callSid}] raw transcript: "${transcript}"`);
  } catch (err) {
    logger.error(`[CALL ${callSid}] STT error: ${err.message}`);
    transcript = '';
  }

  const text = (transcript || '').toLowerCase();
  console.log('[LANG DETECT RAW]', text); 
  // üëâ –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤—Ä—É—á–Ω—É—é –ø–æ —Ñ—Ä–∞–∑–µ
if (text.includes('—Å–±—Ä–æ—Å') || text.includes('reset')) {
  rememberedLangs.delete(from); // –µ—Å–ª–∏ —Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  logger.info(`[CALL ${callSid}] –Ø–∑—ã–∫ —Å–±—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é`);
  const tw = new VoiceResponse();
  tw.say({
  voice: 'Polly.Tatyana',
  language: 'ru-RU'
}, '<speak>–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –°–∫–∞–∂–∏—Ç–µ "–ü—Ä–∏–≤–µ—Ç" –∏–ª–∏ "Hello", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.</speak>');

tw.say({
  voice: 'Polly.Joanna',
  language: 'en-US'
}, '<speak>Let‚Äôs start over. Please say "Hello" or "–ü—Ä–∏–≤–µ—Ç" to choose a language.</speak>');
  tw.record({
    playBeep: true,
    maxLength: 6,
    action: '/api/voice/handle-greeting',
    method: 'POST',
  });
  return res.type('text/xml').send(tw.toString());
}
  console.log(`[GREETING] Raw STT text: "${text}"`);
  if (!text || text.trim() === '') {
  logger.warn(`[STT] Empty result ‚ùó cannot determine language`);

  const gender = 'female';
const { voiceName, languageCode } = getLanguageParams('en', gender); // —è–∑—ã–∫ –ø–æ–∫–∞ 'en', —Ç.–∫. –æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω

const tw = new VoiceResponse();
tw.say({
  voice: voiceName,
  language: languageCode
}, wrapInSsml('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª–∞. <break time="600ms"/> –°–∫–∞–∂–∏—Ç–µ "–ø—Ä–∏–≤–µ—Ç" –∏–ª–∏ "Hello", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', languageCode));

tw.record({
  transcribe: true,
  transcribeCallback: '/api/voice/handle-greeting',
  maxLength: 6,
  playBeep: true,
  trim: 'do-not-trim'
});

  tw.record({
    transcribe: true,
    transcribeCallback: '/api/voice/handle-greeting',
    maxLength: 6,
    playBeep: true,
    trim: 'do-not-trim'
  });

  res.type('text/xml');
  return res.send(tw.toString());
}
  logger.debug(`[CALL ${callSid}] Transcribed greeting: "${text}"`);

  // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –º–µ—Ç–∫—É —è–∑—ã–∫–∞
  let langKey = 'en';
  if (/–ø—Ä–∏–≤–µ—Ç|–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç|–øp–∏–≤–µ—Ç|–ø—Ä–µ–≤–µ—Ç|–ø—Ä–∏ –≤–µ—Ç|privet|prevet|pre[-\s]?vet/i.test(text.trim())) {
    langKey = 'ru';
    logger.info(`[CALL ${callSid}] Language selected: Russian`);
  } else if (/hello/.test(text)) {
    logger.info(`[CALL ${callSid}] Language selected: English`);
  } else {
    logger.warn(`[CALL ${callSid}] Unable to determine language, using default`);
    logger.debug(`[CALL ${callSid}] –ò—Ç–æ–≥–æ–≤—ã–π languageCode: ${languageCode}`);
  }
  req.languageCode = langKey === 'ru' ? 'ru-RU' : 'en-US';
  
  userMemory[callSid] = { language: languageCode };
  logger.info(`[CALL ${callSid}] Language set to: ${req.languageCode}`);
  // <<< –í–°–¢–ê–í–ö–ê: –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—á–∏
  const { voiceName, languageCode } = getLanguageParams(req.languageCode || 'en-US');
if (!voiceName || !languageCode) {
  logger.error(`[CALL ${callSid}] –û—à–∏–±–∫–∞: voiceName –∏–ª–∏ languageCode –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã`);
}
  // 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å
  const prompt = langKey === 'ru'
    ? '–°–ø–∞—Å–∏–±–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
    : 'Thanks! How can I help you?';
  logger.info(`[CALL ${callSid}] Prompt="${prompt}", voice=${voiceName}, lang=${languageCode}`); 

  // 4) –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const tw = new VoiceResponse(); 
  tw.say({ voice: voiceName, language: languageCode }, prompt); 
  tw.record({ // <<< –í–°–¢–ê–í–ö–ê
    playBeep:  true,
    maxLength: 10,
    timeout:   3,
    action:    `/api/voice/continue?lang=${languageCode}`, 
    method:    'POST'
  }); // <<< –í–°–¢–ê–í–ö–ê

  const xml = tw.toString();
  logger.debug(`[CALL ${callSid}] TwiML handleGreeting:\n${xml}`); 
  res.type('text/xml').send(xml);
}

module.exports = {
  handleInitialGreeting,
  handleGreeting,
};